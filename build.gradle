buildscript {
    ext.kotlinVersion = '1.6.10'
    ext.kotlinLangVersion = '1.6'
    ext.kotlinCoroutinesVersion = '1.3.7'
    ext.dokkaVersion = '1.4.30'
    ext.kotlinLoggingVersion = '1.7.9'
    ext.annotationsVersion = '19.0.0'
    ext.licensePluginVersion = '0.16.1'
    ext.nexusPluginVersion = '0.21.2'
    ext.junitVersion = '4.13.2'
    ext.slf4jVersion = '1.7.30'
    ext.commonsCompressVersion = '1.21'
    ext.jcToolsVersion = '4.0.1'
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version "$kotlinVersion"
    id 'org.jetbrains.dokka' version "$dokkaVersion"
    id 'com.github.hierynomus.license' version "$licensePluginVersion"
    id 'io.codearte.nexus-staging' version "$nexusPluginVersion"
}

group = 'org.jetbrains.xodus'
version = hasProperty('xodusVersion') ? project.xodusVersion : ''
def isSnapshot = version.endsWith('SNAPSHOT')
def isDailyBuild = hasProperty('dailyBuild') ? project.dailyBuild : false
def mavenPublishUrl = hasProperty('mavenPublishUrl') ? project.mavenPublishUrl : ''
def mavenPublishUsername = hasProperty('mavenPublishUsername') ? project.mavenPublishUsername : ''
def mavenPublishPassword = hasProperty('mavenPublishPassword') ? project.mavenPublishPassword : ''
def signingKeyId = hasProperty('signingKeyId') ? project.signingKeyId : ''
def signingPassword = hasProperty('signingPassword') ? project.signingPassword : ''
def signingSecretKeyRingFile = hasProperty('signingSecretKeyRingFile') ? project.signingSecretKeyRingFile : '../key.gpg'
def publishUrl = isDailyBuild ? "https://packages.jetbrains.team/maven/p/xodus/xodus-daily" : mavenPublishUrl


static def shouldDeploy(project) {
    return project.version.length() > 0 && !(project.name in ['benchmarks', 'samples'])
}

static def shouldApplyDokka(project) {
    return project.version.length() > 0 && !(project.name in ['benchmarks', 'samples', 'query'])
}


wrapper {
    gradleVersion = '7.6'
}

defaultTasks 'assemble'

// Use nexus-staging-plugin to workaround https://issues.sonatype.org/browse/OSSRH-5454
nexusStaging {
    username = mavenPublishUsername
    password = mavenPublishPassword
    delayBetweenRetriesInMillis = 30000
    stagingProfileId = "89ee7caa6631c4"
}

allprojects {
    repositories {
        maven { url "https://cache-redirector.jetbrains.com/repo1.maven.org/maven2" }
        // necessary for dokka 1.4.30
        maven { url "https://maven.pkg.jetbrains.space/public/p/kotlinx-html/maven" }
    }
}


subprojects {
    apply plugin: 'license'
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'signing'
    apply plugin: 'org.jetbrains.dokka'
    apply plugin: 'maven-publish'

    sourceCompatibility = 11
    compileJava.options.encoding = 'UTF-8'
    group = rootProject.group
    version = rootProject.version
    archivesBaseName = rootProject.name + '-' + project.name

    license {
        header rootProject.file('license/copyright.ftl')
        strictCheck true
        ext.inceptionYear = 2010
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        ext.owner = 'JetBrains s.r.o.'
        include "**/*.kt"
        include "**/*.java"
        mapping {
            kt = 'JAVADOC_STYLE'
        }
    }

    dependencies {
        implementation "org.apache.commons:commons-compress:$commonsCompressVersion"
        implementation 'org.lz4:lz4-java:1.8.0'
        implementation "it.unimi.dsi:fastutil:8.5.9"
        implementation "org.jctools:jctools-core:$jcToolsVersion"
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"


        testImplementation group: 'junit', name: 'junit', version: "$junitVersion"
        testImplementation group: 'org.slf4j', name: 'slf4j-simple', version: "$slf4jVersion"
    }

    // tests for most of sub-projects run with database encryption turned on
    if (!(project.name in ['benchmarks', 'compress', 'crypto', 'openAPI', 'samples', 'utils'])) {
        test {
            systemProperty 'exodus.cipherId', 'jetbrains.exodus.crypto.streamciphers.JBChaChaStreamCipherProvider'
            systemProperty 'exodus.cipherKey', '000102030405060708090a0b0c0d0e0f000102030405060708090a0b0c0d0e0f'
            systemProperty 'exodus.cipherBasicIV', '314159262718281828'
            // force v2 database format in tests
            systemProperty 'exodus.useVersion1Format', 'false'
            // force using bitmaps in entity-store implementation
            systemProperty 'exodus.entityStore.useIntForLocalId', 'true'
            // uncomment the following line to run tests in-memory
            //systemProperty 'exodus.log.readerWriterProvider', 'jetbrains.exodus.io.inMemory.MemoryDataReaderWriterProvider'
        }
        dependencies {
            testImplementation project(':crypto')
        }
    }


    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    jar {
        manifest {
            attributes 'Implementation-Title': archivesBaseName, 'Implementation-Version': project.version
        }
    }

    test {
        systemProperty 'exodus.tests.buildDirectory', project.buildDir
        minHeapSize = '1g'
        maxHeapSize = '1g'
        jvmArgs = ['-ea', '-XX:+HeapDumpOnOutOfMemoryError'
                   //, '-Dexodus.log.cache.useSoftReferences=true'
                   //, '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=2808'

        ]
        //testLogging.showStandardStreams = true
    }

    javadoc.failOnError = false
    // work around for Java 8 javadoc which is too strict
    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }

    // configuring projects with Kotlin sources
    dependencies {
        api "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
        implementation "io.github.microutils:kotlin-logging:$kotlinLoggingVersion"
    }
    compileKotlin {
        kotlinOptions {
            jvmTarget = '11'
            languageVersion = "$kotlinLangVersion"
            apiVersion = "$kotlinLangVersion"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = '11'
            languageVersion = "$kotlinLangVersion"
            apiVersion = "$kotlinLangVersion"
        }
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    if (shouldApplyDokka(project)) {
        dokkaJavadoc {
            dokkaSourceSets {
                configureEach {
                    reportUndocumented.set(false)
                }
            }
        }
        javadocJar {
            dependsOn dokkaJavadoc
            from dokkaJavadoc.outputDirectory
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        }
    }


    if (!isSnapshot && signingKeyId.length() > 0) {
        ext.'signing.keyId' = signingKeyId
        ext.'signing.password' = signingPassword
        ext.'signing.secretKeyRingFile' = signingSecretKeyRingFile
    }

    afterEvaluate { project ->
        if (shouldDeploy(project) && !(isDailyBuild && project.name == 'tools')) {
            publishing {
                repositories {
                    maven {
                        url = publishUrl
                        credentials {
                            username = mavenPublishUsername
                            password = mavenPublishPassword
                        }
                    }
                }
                publications {
                    mavenJava(MavenPublication) {
                        artifactId = "xodus-${project.name}"
                        from components.java
                        pom {
                            name = 'Xodus'
                            description = 'Xodus is pure Java transactional schema-less embedded database'
                            packaging = 'jar'
                            url = 'https://github.com/JetBrains/xodus'
                            scm {
                                url = 'https://github.com/JetBrains/xodus'
                                connection = 'scm:git:https://github.com/JetBrains/xodus.git'
                                developerConnection = 'scm:git:https://github.com/JetBrains/xodus.git'
                            }

                            licenses {
                                license {
                                    name = 'The Apache Software License, Version 2.0'
                                    url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                                    distribution = 'repo'
                                }
                            }

                            developers {
                                developer {
                                    id = 'JetBrains'
                                    name = 'JetBrains Team'
                                    organization = 'JetBrains s.r.o'
                                    organizationUrl = 'https://www.jetbrains.com'
                                }
                            }
                        }
                    }
                }
            }

            signing {
                required { !isSnapshot && signingKeyId.length() > 0 }
                sign publishing.publications.mavenJava
            }
        }
    }
}
