/*
 * Copyright 2010 - 2023 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
option java_package = "jetbrains.vectoriadb.service.base";
import "google/protobuf/empty.proto";

service IndexManager {
  rpc CreateIndex(CreateIndexRequest) returns (CreateIndexResponse) {}
  rpc BuildIndex(IndexNameRequest) returns (google.protobuf.Empty) {}
  rpc DropIndex(IndexNameRequest) returns (google.protobuf.Empty) {}
  rpc List(google.protobuf.Empty) returns (IndexListResponse) {}
  rpc IndexState(IndexNameRequest) returns (IndexStateResponse) {}
  rpc BuildStatus(google.protobuf.Empty) returns (stream BuildStatusResponse) {}
  rpc UploadVectors(stream UploadVectorsRequest) returns (google.protobuf.Empty) {}
  rpc FindNearestNeighbours(FindNearestNeighboursRequest) returns (FindNearestNeighboursResponse) {}
  rpc switchToSearchMode(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  rpc switchToBuildMode(google.protobuf.Empty) returns (google.protobuf.Empty) {}
}

message FindNearestNeighboursRequest {
  string index_name = 1;
  repeated float vector_components = 2;
  int32 k = 3;
}

message FindNearestNeighboursResponse {
  repeated int32 ids = 1;
}

message UploadVectorsRequest {
  string index_name = 1;
  repeated float vector_components = 2;
}

message IndexListResponse {
  repeated string index_names = 1;
}

message IndexNameRequest {
  string index_name = 1;
}

message CreateIndexRequest {
  string index_name = 1;
  Distance distance = 2;
}

message CreateIndexResponse {
  int32 maximumConnectionsPerVertex = 1;
  int32  maximumCandidatesReturned = 2;
  int32  compressionRatio = 3;
  float  distanceMultiplier = 4;
}

enum Distance {
  L2 = 0;
  IP = 1;
  COSINE = 2;
}

message IndexStateResponse {
  IndexState state = 1;
}

enum IndexState {
  CREATING = 0;
  CREATED = 1;
  UPLOADING = 2;
  IN_BUILD_QUEUE = 3;
  BUILDING = 4;
  BUILT = 5;
  BROKEN = 6;
}

message BuildStatusResponse {
  string  indexName = 1;
  repeated BuildPhase phases = 2;
}

message BuildPhase {
  string name = 1;
  double completionPercentage = 2;
  repeated string parameters = 3;
}
